<?php
/*
Copyright 2014 Carlson Santana Cruz

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */

namespace hatemile\implementation;

require_once dirname(__FILE__) . '/../AccessibleImage.php';
require_once dirname(__FILE__) . '/../util/HTMLDOMElement.php';
require_once dirname(__FILE__) . '/../util/HTMLDOMParser.php';
require_once dirname(__FILE__) . '/../util/Configure.php';
require_once dirname(__FILE__) . '/../util/CommonFunctions.php';

use hatemile\AccessibleImage;
use hatemile\util\HTMLDOMElement;
use hatemile\util\HTMLDOMParser;
use hatemile\util\Configure;
use hatemile\util\CommonFunctions;

/**
 * The AccessibleImageImpl class is official implementation of AccessibleImage
 * interface.
 * @version 2014-07-23
 */
class AccessibleImageImpl implements AccessibleImage {
	
	/**
	 * The HTML parser.
	 * @var \hatemile\util\HTMLDOMParser
	 */
	protected $parser;
	
	/**
	 * The prefix of generated id.
	 * @var string
	 */
	protected $prefixId;
	
	/**
	 * The HTML class of the list of map of image.
	 * @var string
	 */
	protected $classListImageAreas;
	
	/**
	 * The HTML class of the element for show the long description of image.
	 * @var string
	 */
	protected $classLongDescriptionLink;
	
	/**
	 * The prefix of content of long description.
	 * @var string
	 */
	protected $prefixLongDescriptionLink;
	
	/**
	 * The suffix of content of long description.
	 * @var string
	 */
	protected $suffixLongDescriptionLink;
	
	/**
	 * The name of attribute that link the list generated by map with a image.
	 * @var string
	 */
	protected $dataListForImage;
	
	/**
	 * The name of attribute that link the anchor of long description with a
	 * image.
	 * @var string
	 */
	protected $dataLongDescriptionForImage;
	
	/**
	 * The name of attribute for that the element not can be modified by
	 * HaTeMiLe.
	 * @var string
	 */
	protected $dataIgnore;
	
	/**
	 * Initializes a new object that manipulate the accessibility of the images
	 * of parser.
	 * @param \hatemile\util\HTMLDOMParser $parser The HTML parser.
	 * @param \hatemile\util\Configure $configure The configuration of HaTeMiLe.
	 */
	public function __construct(HTMLDOMParser $parser, Configure $configure) {
		$this->parser = $parser;
		$this->prefixId = $configure->getParameter('prefix-generated-ids');
		$this->classListImageAreas = $configure->getParameter('class-list-image-areas');
		$this->classLongDescriptionLink = $configure->getParameter('class-longdescription-link');
		$this->prefixLongDescriptionLink = $configure->getParameter('prefix-longdescription-link');
		$this->suffixLongDescriptionLink = $configure->getParameter('suffix-longdescription-link');
		$this->dataListForImage = 'data-' . $configure->getParameter('data-list-for-image');
		$this->dataLongDescriptionForImage
				= 'data-' . $configure->getParameter('data-longdescription-for-image');
		$this->dataIgnore = 'data-' . $configure->getParameter('data-ignore');
	}
	
	public function fixMap(HTMLDOMElement $map) {
		if ($map->getTagName() === 'MAP') {
			$name = null;
			if ($map->hasAttribute('name')) {
				$name = $map->getAttribute('name');
			} else if ($map->hasAttribute('id')) {
				$name = $map->getAttribute('id');
			}
			if (!empty($name)) {
				$list = $this->parser->createElement('ul');
				$areas = $this->parser->find($map)->findChildren('area[alt]')->listResults();
				foreach ($areas as $area) {
					$item = $this->parser->createElement('li');
					$anchor = $this->parser->createElement('a');
					$anchor->appendText($area->getAttribute('alt'));
					
					CommonFunctions::setListAttributes($area, $anchor, array('href', 'tabindex'
							, 'target', 'download', 'hreflang', 'media', 'nohref', 'ping', 'rel'
							, 'type', 'title', 'accesskey', 'name', 'onblur', 'onfocus', 'onmouseout'
							, 'onmouseover', 'onkeydown', 'onkeypress', 'onkeyup', 'onmousedown'
							, 'onclick', 'ondblclick', 'onmouseup'));
					
					$item->appendElement($anchor);
					$list->appendElement($item);
				}
				if ($list->hasChildren()) {
					$list->setAttribute('class', $this->classListImageAreas);
					$images = $this->parser->find('[usemap=#' . $name . ']')->listResults();
					foreach ($images as $image) {
						CommonFunctions::generateId($image, $this->prefixId);
						$id = $image->getAttribute('id');
						if ($this->parser->find('[' . $this->dataListForImage . '=' . $id . ']')
								->firstResult() === null) {
							$newList = $list->cloneElement();
							$newList->setAttribute($this->dataListForImage, $id);
							$image->insertAfter($newList);
						}
					}
				}
			}
		}
	}
	
	public function fixMaps() {
		$maps = $this->parser->find('map')->listResults();
		foreach ($maps as $map) {
			if (!$map->hasAttribute($this->dataIgnore)) {
				$this->fixMap($map);
			}
		}
	}
	
	public function fixLongDescription(HTMLDOMElement $element) {
		if ($element->hasAttribute('longdesc')) {
			CommonFunctions::generateId($element, $this->prefixId);
			$id = $element->getAttribute('id');
			if ($this->parser->find('[' . $this->dataLongDescriptionForImage . '=' . $id . ']')
					->firstResult() === null) {
				if ($element->hasAttribute('alt')) {
					$text = $this->prefixLongDescriptionLink . ' ' . $element->getAttribute('alt')
							. ' ' . $this->suffixLongDescriptionLink;
				} else {
					$text = $this->prefixLongDescriptionLink . ' ' . $this->suffixLongDescriptionLink;
				}
				$anchor = $this->parser->createElement('a');
				$anchor->setAttribute('href', $element->getAttribute('longdesc'));
				$anchor->setAttribute('target', '_blank');
				$anchor->setAttribute($this->dataLongDescriptionForImage, $id);
				$anchor->setAttribute('class', $this->classLongDescriptionLink);
				$anchor->appendText(\trim($text));
				$element->insertAfter($anchor);
			}
		}
	}
	
	public function fixLongDescriptions() {
		$elements = $this->parser->find('[longdesc]')->listResults();
		foreach ($elements as $element) {
			if (!$element->hasAttribute($this->dataIgnore)) {
				$this->fixLongDescription($element);
			}
		}
	}
}